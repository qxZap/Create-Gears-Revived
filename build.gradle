buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
        maven {url='https://repo.spongepowered.org/maven'}
    }
    dependencies {
        minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
        classpath 'com.wynprice.cursemaven:CurseMaven:2.1.3'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

// stealing some gradle from railways
// thanks grimm and tal
// and me too a little

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "http://mmd.blamejared.com/"
    }
}

group = 'com.kotakotik'
String versionEnv = System.getenv("GEARS_VERSION")
version = "${mc_version}-${version}"
if(versionEnv != null) {
    version ="${mc_version}_${versionEnv}"
}
archivesBaseName = 'creategears'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            arg '-mixin.config=creategears.mixins.json'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                creategears {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("server")

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg '-mixin.config=creategears.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                creategears {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'creategears', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                creategears {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
}


shadowJar {
    archiveBaseName.set("gears")
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.kotakotik.creategears.repack.registrate'
}

reobf {
    shadowJar {}
    jar {}
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    setArchiveClassifier("deobf")
    // archiveClassifier 'deobf'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

artifacts {
    archives deobfJar
}

build.dependsOn deobfJar
build.dependsOn shadowJar
jar.dependsOn shadowJar

repositories {
    mavenLocal()
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven { // Registrate
        url "http://maven.tterrag.com/"
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // insert outdated forge documentation here

    implementation fg.deobf("mezz.jei:jei-${jei_version}")

    implementation fg.deobf("curse.maven:create-4835191:${create_file_id}")

//    implementation fg.deobf("curse.maven:cogwheel-tweaker-465296:${cogwheeltweaker_file}")
//    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${crafttweaker_version}")
//    implementation fg.deobf("curse.maven:cnt-237065:${contenttweaker_file}")
//    runtimeOnly fg.deobf("curse.maven:openloader-354339:${openloader_file}")

    def registrate = "com.tterrag.registrate:Registrate:MC${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "creategears",
                "Specification-Vendor"    : "kotakotik22",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "kotakotik22",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "creategears.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "creategears.refmap.json"
}

jar.finalizedBy('reobfJar')